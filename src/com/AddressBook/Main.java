 /*
  * Title:          com.AddressBook
  * Authors:        Miles Maloney, Caden Keese
  * Last Modified:  5/1/20
  * Description:
  * */
 package com.AddressBook;

 import javax.crypto.Cipher;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Paths;
 import java.security.GeneralSecurityException;
 import java.security.KeyPair;
 import java.security.PrivateKey;
 import java.util.Arrays;
 import java.util.Base64;

 import static com.AddressBook.Encryption.*;

 public class Main {
     public static void main(String[] args) throws GeneralSecurityException, IOException {
//         KeyPair kp = generatePublicPrivateKeys();
//         PrivateKey priv = kp.getPrivate();
//         String privb64 = keyToB64(priv);
//         String fakePass = "password43";
//         String fakePass256 = hashSHA256(fakePass);
//         byte[] encryptedB = encrypt(privb64, fakePass256);
//         String encrypted = bytesToString(encryptedB);
//         Files.writeString(Paths.get("test123"), encrypted);
//         String fromFile = Files.readString(Paths.get("test123"));
//         byte[] encryptedFromFile = stringToBytes(fromFile);
//         String decryptedB64 = decrypt(encryptedFromFile, fakePass256);
//         PrivateKey privDecrypted = privateKeyFromB64(decryptedB64);
//         System.out.println("priv = " + priv);
//         System.out.println("privDecrypted = " + privDecrypted);
//         System.out.println(priv.toString().equals(privDecrypted.toString()));

//         String signable = "asdkc43asfdknjha;adasdfvjknvanc454aasdaasd"+ ";";
//         byte[] signableBytes = signable.getBytes(StandardCharsets.UTF_8);
//         System.out.println(signableBytes.length);
//         String s = encryptWithRSA(kp.getPrivate(),signable);
//         String s2 = decryptWithRSA(kp.getPublic(), s);
//         System.out.println(s2.equals(signable));

         String s = "RqkA1gKowsEgdhEaDaLkWjnDgdch1dMz96eD1QEkykQwibZ9fPY4YaGIz243dkw/o2CeWtEGq/BXxWhe4cARCnITDiU29bfbyjz4YAKeMEmW7xyXvceRXTVaz0kL4hLbdIkLnittlvUvaA+Veh8Bg/ZlpmVETPsY72KN5+h/NJnWSIwYLhMaxn8327PLoC1to9OuL08UYhnvNd/JeWdpTcg1SR1fgyeinjLtymAMxLGMvnj7n7fCIKdEpR+26USeTC+H5J5PQ+8tTO6mMi9tIGaMncCnNLHkEccpmPFIKkH5QryXz7idfAbR/wegME1JWiY82YRkyrOs0j97UsVqKw==;gE3S2YtwApRzy2/oZxttadIvLJuzPKg1fHKx7kL8gFbjZa8ElHYqscH05ucZg9oA/X/2S3hksVUBLtcSynUNj1JUjapReBFmwAILoKtvsb9hy/Uhg3lCzjwg8A9BqOs4YlMZnlZ0H7BwbHbg4dNALJrLzwLxlDbfTDmnI0t0XjEmTNk9/AFuK2vOJ1xKzIK+SXSHPdqlxINV5TjPGCVSxDr3Fg0U9iTse88IQP8t0pkKiNI/pPwYuLufJ7qPha0BHtOZ/Un2O+x4Tf3t78+jOlzLIEP3AdT0STVRoCiz+49BS9k3jIjcXUuySa82am3WdTYdKeW3/RkzjtXB+wnpig==";

         String privb
         PrivateKey pk = privateKeyFromB64(privb64);
         decryptWithRSA(pk, s);




     }
 }
